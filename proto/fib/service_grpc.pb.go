// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/fib/service.proto

package fib

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FibService_Number_FullMethodName   = "/FibService/Number"
	FibService_Sequence_FullMethodName = "/FibService/Sequence"
)

// FibServiceClient is the client API for FibService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FibServiceClient interface {
	Number(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (*NumberResponse, error)
	Sequence(ctx context.Context, in *SequenceRequest, opts ...grpc.CallOption) (*SequenceResponse, error)
}

type fibServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFibServiceClient(cc grpc.ClientConnInterface) FibServiceClient {
	return &fibServiceClient{cc}
}

func (c *fibServiceClient) Number(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (*NumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NumberResponse)
	err := c.cc.Invoke(ctx, FibService_Number_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fibServiceClient) Sequence(ctx context.Context, in *SequenceRequest, opts ...grpc.CallOption) (*SequenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SequenceResponse)
	err := c.cc.Invoke(ctx, FibService_Sequence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FibServiceServer is the server API for FibService service.
// All implementations must embed UnimplementedFibServiceServer
// for forward compatibility
type FibServiceServer interface {
	Number(context.Context, *NumberRequest) (*NumberResponse, error)
	Sequence(context.Context, *SequenceRequest) (*SequenceResponse, error)
	mustEmbedUnimplementedFibServiceServer()
}

// UnimplementedFibServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFibServiceServer struct {
}

func (UnimplementedFibServiceServer) Number(context.Context, *NumberRequest) (*NumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Number not implemented")
}
func (UnimplementedFibServiceServer) Sequence(context.Context, *SequenceRequest) (*SequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sequence not implemented")
}
func (UnimplementedFibServiceServer) mustEmbedUnimplementedFibServiceServer() {}

// UnsafeFibServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FibServiceServer will
// result in compilation errors.
type UnsafeFibServiceServer interface {
	mustEmbedUnimplementedFibServiceServer()
}

func RegisterFibServiceServer(s grpc.ServiceRegistrar, srv FibServiceServer) {
	s.RegisterService(&FibService_ServiceDesc, srv)
}

func _FibService_Number_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibServiceServer).Number(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FibService_Number_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibServiceServer).Number(ctx, req.(*NumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FibService_Sequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibServiceServer).Sequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FibService_Sequence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibServiceServer).Sequence(ctx, req.(*SequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FibService_ServiceDesc is the grpc.ServiceDesc for FibService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FibService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FibService",
	HandlerType: (*FibServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Number",
			Handler:    _FibService_Number_Handler,
		},
		{
			MethodName: "Sequence",
			Handler:    _FibService_Sequence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fib/service.proto",
}
